
;; recursively find .org files in provided directory
;; modified from an Emacs Lisp Intro example
(defun sa-find-org-file-recursively (&optional directory filext)
  "Return .org and .org_archive files recursively from DIRECTORY.
If FILEXT is provided, return files with extension FILEXT instead."
  (interactive "DDirectory: ")
  (let* (org-file-list
	 (case-fold-search t)	      ; filesystems are case sensitive
	 (file-name-regex "^[^.#].*") ; exclude dot, autosave, and backup files
	 (filext (or filext "org$\\\|org_archive"))
	 (fileregex (format "%s\\.\\(%s$\\)" file-name-regex filext))
	 (cur-dir-list (directory-files directory t file-name-regex)))
    ;; loop over directory listing
    (dolist (file-or-dir cur-dir-list org-file-list) ; returns org-file-list
      (cond
       ((file-regular-p file-or-dir) ; regular files
	(if (string-match fileregex file-or-dir) ; org files
	    (add-to-list 'org-file-list file-or-dir)))
       ((file-directory-p file-or-dir)
	(dolist (org-file (sa-find-org-file-recursively file-or-dir filext)
			  org-file-list) ; add files found to result
	  (add-to-list 'org-file-list org-file)))))))

(defun show-org-file-list ()
  "Opens buffer that shows all .org and .org_archive files in the
 by the global variable org-base-dir specified directory and it's subdirectories."
  (interactive)
  (let ((my-buffer (get-buffer-create "*orgfiles listed*"))
        (orgfiles (list)))
    (setq orgfiles
          (append (sa-find-org-file-recursively org-base-dir)))
    (switch-to-buffer my-buffer)
    (erase-buffer)
    (org-mode)
    (org-file-list-mode)
    (insert (mapconcat '(lambda (x)
                          (concat "[[" x "][" (cl-subseq x (length org-base-dir)) "]]")) 
                       orgfiles "\n"))
    (goto-char 0)
    (isearch-forward)
    (message "Orgfiles")))


(define-minor-mode org-file-list-mode
  "Minor Mode for viewing the org-filelist generated by show-org-file-list"
  :init-value nil
  :keymap
  '(
    ((kbd "q") 
     . (lambda ()
         (interactive)
         (kill-buffer (current-buffer))))
    ((kbd "o") 
     . (lambda ()
         (interactive)
         (org-open-at-point)
         (kill-buffer (current-buffer))))))
(defvar org-file-list-map
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "<return>") '(lambda ()
         (interactive)
         (org-open-at-point)
         (kill-buffer (current-buffer))))
    (define-key map (kbd "C-g") '(lambda ()
         (interactive)
         (kill-buffer (current-buffer))))
    map))
(add-to-list 'minor-mode-map-alist `(org-file-list-mode . ,org-file-list-map) t)
